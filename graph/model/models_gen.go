// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Batch struct {
	ID           string             `json:"id"`
	Name         string             `json:"name"`
	Recipe       *Recipe            `json:"recipe"`
	State        BatchState         `json:"state"`
	Fermentation *FermentationBatch `json:"fermentation"`
}

type FermentationBatch struct {
	ID        string                 `json:"id"`
	Monitor   *FermentationMonitor   `json:"monitor"`
	Container *FermentationContainer `json:"container"`
}

type FermentationContainer struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	CanHeat bool   `json:"canHeat"`
	Heating bool   `json:"heating"`
	Cooling bool   `json:"cooling"`
	CanCool bool   `json:"canCool"`
}

type FermentationMonitor struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Type        string   `json:"type"`
	Temperature *float64 `json:"temperature"`
	Gravity     *float64 `json:"gravity"`
}

type Recipe struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type BatchState string

const (
	BatchStatePlanning     BatchState = "PLANNING"
	BatchStateMashing      BatchState = "MASHING"
	BatchStateFermenting   BatchState = "FERMENTING"
	BatchStateConditioning BatchState = "CONDITIONING"
)

var AllBatchState = []BatchState{
	BatchStatePlanning,
	BatchStateMashing,
	BatchStateFermenting,
	BatchStateConditioning,
}

func (e BatchState) IsValid() bool {
	switch e {
	case BatchStatePlanning, BatchStateMashing, BatchStateFermenting, BatchStateConditioning:
		return true
	}
	return false
}

func (e BatchState) String() string {
	return string(e)
}

func (e *BatchState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BatchState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BatchState", str)
	}
	return nil
}

func (e BatchState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
